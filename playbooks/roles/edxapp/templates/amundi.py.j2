# TODO :
#When session manager is finalized
#Clean up all logs used for debug only, clean code, put credentials in the proper place and not "hardcoded"
from social.utils import handle_http_errors
from social.backends.open_id import OpenIdAuth, OpenIdConnectAuth
from social.backends.oauth import BaseOAuth2, BaseOAuth1
from social.exceptions import AuthMissingParameter
from social.utils import url_add_parameters
import jwt
from pprint import pformat
from student.models import User,UserPreprofile
import re
from urllib import unquote
from base64 import b64decode
from django.conf import settings

import logging
from pprint import pformat
log = logging.getLogger(__name__)



class AmundiOAuth2(BaseOAuth2):
   """Amundi OAuth authentication backend"""
   #name = 'amundi'
   #ID_KEY = 'sub'
   #REDIRECT_STATE = False
   #STATE_PARAMETER = True
   #AUTHORIZATION_URL = 'https://ppr-session-manager.amundi.com/v2/authorize'
   #ACCESS_TOKEN_URL = 'https://ppr-session-manager.amundi.com/v2/token'
   #ACCESS_TOKEN_METHOD = 'POST'
   #DEFAULT_SCOPE = None
   #EXTRA_DATA = [
   #    ('id', 'id'),
   #    ('expires', 'expires')
   #]

   _credentials = settings.FEATURES.get('AmundiOAuth2')
   name = _credentials.get('name')
   ID_KEY = _credentials.get('ID_KEY')
   REDIRECT_STATE = _credentials.get("REDIRECT_STATE")
   STATE_PARAMETER = _credentials.get('STATE_PARAMETER')
   AUTHORIZATION_URL = _credentials.get('AUTHORIZATION_URL')
   ACCESS_TOKEN_URL = _credentials.get('ACCESS_TOKEN_URL')
   ACCESS_TOKEN_METHOD = _credentials.get('ACCESS_TOKEN_METHOD')
   DEFAULT_SCOPE = _credentials.get('DEFAULT_SCOPE')
   EXTRA_DATA = _credentials.get('EXTRA_DATA')

   def get_user_details(self, response):
       """Return user details from Amundi account"""
       q={}
       q['email'] = ''
       q['username'] = str(response['sub'])[0:10]
       q['first_name'] = ''
       q['last_name'] = ''
       q['language'] = ''
       log.info("SUB: "+pformat(response['sub']))
       try:
            uuid_user = UserPreprofile.objects.get(uuid=response['sub'])
            pre_user = uuid_user.first_name+uuid_user.last_name
            #ensure username exist
            try:
                list_user = User.objects.filter(string__contains=pre_user)
                i = len(list_user) + 1
                pre_user = pre_user+str(i)
            except:
                pass

            email_check = False
            #ensure current email is not used for another account
            try:
                email_ = User.objects.get(email=uuid_user.email)
                email_check = True
            except:
                pass
                log.info("[amundi.py] user_email: "+uuid_user.email)
            if not email_check:
                q['email'] = uuid_user.email
                q['first_name'] = uuid_user.first_name
                q['last_name'] = uuid_user.last_name
                q['language'] = uuid_user.language
                q['username'] = pre_user
       except:
            pass
       log.info("[get_user_details] user_dict: "+pformat(q))
       return {'username': q['username'],
               'email': q['email'],
               'first_name': q['first_name'],
               'last_name': q['last_name'],
               'fullname': q['first_name']+' '+q['last_name'],
               'language': q['language']}

   def user_data(self, access_token, *args, **kwargs):
       """Loads user data from service"""
       try:
           log.info("[user_data] json from at payload: "+pformat(jwt.decode(access_token,verify=False)))
           return jwt.decode(access_token,verify=False)
       except ValueError:
           return None

   def get_redirect_uri(self, state=None):
       """Build redirect with redirect_state parameter."""
       uri = self.redirect_uri
       uri = uri.replace("http:","https:")
       #TODO : properly get lang
       if str(uri).find("lang") == -1:
           uri = uri + "?lang=" + str(self.strategy.request.GET.get('lang','en'))
       if self.REDIRECT_STATE and state:
           uri = url_add_parameters(uri, {'redirect_state': state})
       return uri

   def get_key_and_secret(self):
       credentials = settings.FEATURES.get('SEM_CREDENTIALS')
       prod = settings.FEATURES.get('VM_STATUS')
       microsite = self.redirect_uri.split('//',1)[1].split('/',1)[0].split('.',1)[0].lower()
       try:
           client_id = credentials.get(prod).get(microsite).get('client_id')
           client_secret = credentials.get(prod).get(microsite).get('secret')
       except:
           client_id = 'default_client'
           client_secret = 'default_secret'
       log.info("[get_key_and_secret] client_id: "+pformat(client_id))

       return client_id, client_secret

   def get_user_id(self, details, response):
       """Return a unique ID for the current user, by default from server
       response."""
       return jwt.decode(response['access_token'],verify=False).get(self.ID_KEY)

   def auth_extra_arguments(self):
        #return lang if given, if nothing given go for 'en'
        return {
            'hl': self.strategy.request.GET.get('lang','en')
        }

